import os
import json
from openai import OpenAI  

# üîπ OpenAI Client
client = OpenAI(api_key="YOUR_OPENAI_KEY_HERE")  # Replace with your OpenAI API key

# üîπ Paths
script_dir = os.path.dirname(__file__)  
pdf_folder = os.path.join(script_dir, "Invoices")
output_json_folder = os.path.join(script_dir, "JSON_Output_vision_validation")

# Ensure output folders exist
os.makedirs(output_json_folder, exist_ok=True)

# üîπ Load Imgur URLs from JSON cache (generated by a separate Imgur upload script)
imgur_cache_file = "imgur_uploads.json"

if os.path.exists(imgur_cache_file):
    with open(imgur_cache_file, "r", encoding="utf-8") as f:
        imgur_cache = json.load(f)
else:
    imgur_cache = {}

def extract_invoice_details(image_urls, file_name, attempt):
    """Uses GPT-4 Vision to extract structured invoice data multiple times for validation."""
    
    prompt = (
        "You are an extremely smart and savvy document reader with Computer Vision Enabled that can use context to find the correct information: "
        "Extract key details from this energy invoice and return ONLY valid JSON output. "
        "These images represent a **single multi-page invoice**. "
        "Do NOT include explanations, descriptions, or irrelevant text‚ÄîONLY return JSON in the specified format. "
        
        "### Extraction Rules\n"
        
        "1. **Identify the Energy Usage Period:**\n"
        "   - Look for a section that explicitly states the usage start and end dates.\n"
        "   - DO NOT include the year in the extracted dates, only the month and day.\n"
        "   - If the invoice lists a single month (e.g., 'JAN'), assume the period runs throughout the whole month.\n"
        "   - If multiple months are displayed, prioritize the most recent month for extraction and ignore older months unless explicitly stated as the usage period.\n"
        "   - If no valid usage period is found, return 'N/A'.\n"
        
        "2. **Find Account or Energy Usage Summary:**\n"
        "   - Locate a summary box or table that lists total usage for the billing period. This section may not always be labeled 'Summary' but could appear in account details or energy sections.\n"
        "   - The correct total usage value should correspond to the identified billing period, ensuring the extracted number aligns with the most recent usage cycle.\n"
        "   - Summary sections often list multiple months. Extract ONLY the most recent month's value and DO NOT sum across multiple months.\n"
        "   - If Peak and Off-Peak usage are separately listed for the billing period, **sum ONLY these two values** to get the total.\n"
        "   - DO NOT sum values if a total usage amount is already explicitly provided in the summary.\n"
        "   - If no summary box exists, check line-item breakdowns and sum only the relevant energy usage entries.\n"
        
        "3. **Extract Energy Type and Units:**\n"
        "   - Identify standard energy types: 'Electricity', 'Natural Gas', 'Diesel', 'Propane', etc.\n"
        "   - Ensure the correct unit is extracted: kWh, MMBtu, CCF, gallons, etc.\n"
        "   - Validate that the extracted energy volume corresponds to the appropriate unit, ensuring no unit mismatches.\n"
        
        "4. **Extract Cost and Currency:**\n"
        "   - Identify the total cost of energy usage from the invoice summary.\n"
        "   - DO NOT include taxes, late fees, service fees, or unrelated charges.\n"
        "   - Extract the correct currency ('USD', 'EUR', 'BRL', etc.).\n"
        
        "5. **Validate Against Other Sections:**\n"
        "   - After extracting energy usage, scan the document for other totals to ensure consistency.\n"
        "   - If a discrepancy exists, prioritize values from the **summary section** over individual line items.\n"
        "   - If peak/off-peak values do not sum correctly, return 'N/A' rather than making assumptions.\n"
        
        "6. **Handling Missing or Ambiguous Data:**\n"
        "   - If any required values (dates, usage, cost) are missing, return 'N/A'.\n"
        "   - DO NOT estimate, infer, or fabricate missing values if not explicitly stated.\n"
        
        "### **Strict JSON Output Format:**\n"
        "[\n"
        "   {\n"
        "      \"location\": \"Country using two character code XX\",\n"
        "      \"usage_start_date\": \"MM-DD\",\n"
        "      \"usage_end_date\": \"MM-DD\",\n"
        "      \"energy_type\": \"Fuel type\",\n"
        "      \"energy_volume\": Numeric value,\n"
        "      \"energy_units\": \"kWh, CCF, MMBtu, gallons, etc. use all lowercase and abbreviations when possible\",\n"
        "      \"cost_amount\": Numeric value,\n"
        "      \"currency\": \"USD, EUR, BRL, etc.\",\n"
        "      \"invoice\": \"Name of invoice\"\n"
        "   }\n"
        "]"
    )

    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": prompt},
            {
                "role": "user",
                "content": [{"type": "image_url", "image_url": {"url": url}} for url in image_urls]
            }
        ],
        max_tokens=1500
    )
    
    return response.choices[0].message.content

# üîπ Process all invoices
for filename in os.listdir(pdf_folder):
    if filename.lower().endswith(".pdf"):
        print(f"Processing: {filename}")
        pdf_path = os.path.join(pdf_folder, filename)
        
        # Retrieve stored Imgur URLs (assuming they were uploaded previously)
        image_urls = [imgur_cache.get(img_path) for img_path in imgur_cache if filename in img_path]

        if not image_urls:
            print(f"‚ùå No valid Imgur URLs found for {filename}, skipping...")
            continue  # Skip to the next PDF

        # Run extraction multiple times (4 times per invoice)
        for attempt in range(1, 5):
            extracted_json = extract_invoice_details(image_urls, filename, attempt)

            # üîπ Validate JSON output
            try:
                extracted_info = json.loads(extracted_json)  # Ensure valid JSON
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è Error: Invalid JSON output from GPT-4 Vision for {filename}, attempt {attempt}")
                print(f"üîπ Raw response: {extracted_json}")  # Debugging output
                continue  # Skip to the next attempt

            # üîπ Save to JSON
            json_filename = f"{os.path.splitext(filename)[0]}_attempt_{attempt}.json"
            json_filepath = os.path.join(output_json_folder, json_filename)

            with open(json_filepath, "w", encoding="utf-8") as f:
                json.dump(extracted_info, f, indent=4)

            print(f"‚úÖ Saved JSON (Attempt {attempt}): {json_filepath}")

print(f"üéâ All processed invoices saved in: {output_json_folder}")
